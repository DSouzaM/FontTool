INFO: :[pc] glyf.parenright.0->NPUSHB|[40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9]
INFO: :     succs are [PUSHW([307])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9]
INFO: :[pc] glyf.parenright.1->PUSHW|[307]
INFO: :     succs are [PUSHB([10, 159, 3, 1])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307]
INFO: :[pc] glyf.parenright.2->PUSHB|[10, 159, 3, 1]
INFO: :     succs are [PUSHW([307])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1]
INFO: :[pc] glyf.parenright.3->PUSHW|[307]
INFO: :     succs are [PUSHB([0, 159, 3, 94, 14])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307]
INFO: :[pc] glyf.parenright.4->PUSHB|[0, 159, 3, 94, 14]
INFO: :     succs are [PUSHW([-16])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14]
INFO: :[pc] glyf.parenright.5->PUSHW|[-16]
INFO: :     succs are [PUSHB([16, 16, 2, 85, 14])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16]
INFO: :[pc] glyf.parenright.6->PUSHB|[16, 16, 2, 85, 14]
INFO: :     succs are [PUSHW([-8])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14]
INFO: :[pc] glyf.parenright.7->PUSHW|[-8]
INFO: :     succs are [PUSHB([15, 15, 2, 85, 14])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8]
INFO: :[pc] glyf.parenright.8->PUSHB|[15, 15, 2, 85, 14]
INFO: :     succs are [PUSHW([-28])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14]
INFO: :[pc] glyf.parenright.9->PUSHW|[-28]
INFO: :     succs are [PUSHB([13, 13, 2, 85, 14])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28]
INFO: :[pc] glyf.parenright.10->PUSHB|[13, 13, 2, 85, 14]
INFO: :     succs are [PUSHW([-20])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14]
INFO: :[pc] glyf.parenright.11->PUSHW|[-20]
INFO: :     succs are [NPUSHB([10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 157, 140, 24])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20]
INFO: :[pc] glyf.parenright.12->NPUSHB|[10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 157, 140, 24]
INFO: :     succs are [CALL([])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 157, 140, 24]
INFO: :[pc] glyf.parenright.13->CALL|[]
INFO: :     succs are [SRP0([])]
INFO: :     call_stack len is 0
INFO: :in glyf.parenright, calling function 24
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 157, 140]
INFO: :[pc] fpgm.384->DUP|[]
INFO: :     succs are [PUSHB([3])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 157, 140, 140]
INFO: :[pc] fpgm.385->PUSHB|[3]
INFO: :     succs are [CINDEX([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 157, 140, 140, 3]
INFO: :[pc] fpgm.386->CINDEX|[]
INFO: :     succs are [RCVT([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 157, 140, 140, 157]
INFO: :[pc] fpgm.387->RCVT|[]
INFO: :     succs are [PUSHB([25])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 157, 140, 140, cvt_table[157]]
INFO: :[pc] fpgm.388->PUSHB|[25]
INFO: :     succs are [SWAP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 157, 140, 140, cvt_table[157], 25]
INFO: :[pc] fpgm.389->SWAP|[]
INFO: :     succs are [WCVTP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 157, 140, 140, 25, cvt_table[157]]
INFO: :[pc] fpgm.390->WCVTP|[]
INFO: :     succs are [RCVT([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 157, 140, 140]
INFO: :[pc] fpgm.391->RCVT|[]
INFO: :     succs are [PUSHB([26])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 157, 140, cvt_table[140]]
INFO: :[pc] fpgm.392->PUSHB|[26]
INFO: :     succs are [SWAP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 157, 140, cvt_table[140], 26]
INFO: :[pc] fpgm.393->SWAP|[]
INFO: :     succs are [WCVTP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 157, 140, 26, cvt_table[140]]
INFO: :[pc] fpgm.394->WCVTP|[]
INFO: :     succs are [RCVT([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 157, 140]
INFO: :[pc] fpgm.395->RCVT|[]
INFO: :     succs are [NEG([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 157, cvt_table[140]]
INFO: :[pc] fpgm.396->NEG|[]
INFO: :     succs are [SWAP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 157, NEG cvt_table[140]]
INFO: :[pc] fpgm.397->SWAP|[]
INFO: :     succs are [RCVT([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, NEG cvt_table[140], 157]
INFO: :[pc] fpgm.398->RCVT|[]
INFO: :     succs are [DUP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, NEG cvt_table[140], cvt_table[157]]
INFO: :[pc] fpgm.399->DUP|[]
INFO: :     succs are [PUSHB([3])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, NEG cvt_table[140], cvt_table[157], cvt_table[157]]
INFO: :[pc] fpgm.400->PUSHB|[3]
INFO: :     succs are [CINDEX([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, NEG cvt_table[140], cvt_table[157], cvt_table[157], 3]
INFO: :[pc] fpgm.401->CINDEX|[]
INFO: :     succs are [ADD([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, NEG cvt_table[140], cvt_table[157], cvt_table[157], NEG cvt_table[140]]
INFO: :[pc] fpgm.402->ADD|[]
INFO: :     succs are [ROUND(['10'])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, NEG cvt_table[140], cvt_table[157], NEG cvt_table[140] ADD cvt_table[157]]
INFO: :[pc] fpgm.403->ROUND|['10']
INFO: :     succs are [DUP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, NEG cvt_table[140], cvt_table[157], F26Dot6]
INFO: :[pc] fpgm.404->DUP|[]
INFO: :     succs are [PUSHB([9])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, NEG cvt_table[140], cvt_table[157], F26Dot6, F26Dot6]
INFO: :[pc] fpgm.405->PUSHB|[9]
INFO: :     succs are [SWAP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, NEG cvt_table[140], cvt_table[157], F26Dot6, F26Dot6, 9]
INFO: :[pc] fpgm.406->SWAP|[]
INFO: :     succs are [WS([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, NEG cvt_table[140], cvt_table[157], F26Dot6, 9, F26Dot6]
INFO: :[pc] fpgm.407->WS|[]
INFO: :     succs are [SWAP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, NEG cvt_table[140], cvt_table[157], F26Dot6]
INFO: :[pc] fpgm.408->SWAP|[]
INFO: :     succs are [ROUND(['00'])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, NEG cvt_table[140], F26Dot6, cvt_table[157]]
INFO: :[pc] fpgm.409->ROUND|['00']
INFO: :     succs are [ROLL([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, NEG cvt_table[140], F26Dot6, F26Dot6]
INFO: :[pc] fpgm.410->ROLL|[]
INFO: :     succs are [ROUND(['10'])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6, F26Dot6, NEG cvt_table[140]]
INFO: :[pc] fpgm.411->ROUND|['10']
INFO: :     succs are [ADD([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6, F26Dot6, F26Dot6]
INFO: :[pc] fpgm.412->ADD|[]
INFO: :     succs are [SUB([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6, F26Dot6 ADD F26Dot6]
INFO: :[pc] fpgm.413->SUB|[]
INFO: :     succs are [DUP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6 ADD F26Dot6 SUB F26Dot6]
INFO: :[pc] fpgm.414->DUP|[]
INFO: :     succs are [PUSHB([26])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6 ADD F26Dot6 SUB F26Dot6, F26Dot6 ADD F26Dot6 SUB F26Dot6]
INFO: :[pc] fpgm.415->PUSHB|[26]
INFO: :     succs are [ROLL([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6 ADD F26Dot6 SUB F26Dot6, F26Dot6 ADD F26Dot6 SUB F26Dot6, 26]
INFO: :[pc] fpgm.416->ROLL|[]
INFO: :     succs are [PUSHB([0])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6 ADD F26Dot6 SUB F26Dot6, 26, F26Dot6 ADD F26Dot6 SUB F26Dot6]
INFO: :[pc] fpgm.417->PUSHB|[0]
INFO: :     succs are [GT([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6 ADD F26Dot6 SUB F26Dot6, 26, F26Dot6 ADD F26Dot6 SUB F26Dot6, 0]
INFO: :[pc] fpgm.418->GT|[]
INFO: :     succs are [JROF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6 ADD F26Dot6 SUB F26Dot6, 26, 0 GT F26Dot6 ADD F26Dot6 SUB F26Dot6]
INFO: :[pc] fpgm.419->JROF|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6 ADD F26Dot6 SUB F26Dot6, 26, 0 GT F26Dot6 ADD F26Dot6 SUB F26Dot6]
INFO: :[pc] fpgm.419->IF|[]
INFO: :     succs are [JMPR([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :entering if block (first time) for $fpgm_24_57, stack height is 56
INFO: :traverse new branch old_state 0 [fpgm.419] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6 ADD F26Dot6 SUB F26Dot6, 26]
INFO: :[pc] fpgm.420->JMPR|[]
INFO: :     succs are [ELSE([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6 ADD F26Dot6 SUB F26Dot6, 26]
INFO: :relative jump target is PUSHB([20, 0])
INFO: :     adjusted succs now [PUSHB([20, 0])]
INFO: :executing JMPR with dest PUSHB([20, 0]), cond None, stack height is 55, program_stack is [arg$55, arg$54, arg$53, arg$52, arg$51, arg$50, arg$49, arg$48, arg$47, arg$46, arg$45, arg$44, arg$43, arg$42, arg$41, arg$40, arg$39, arg$38, arg$37, arg$36, arg$35, arg$34, arg$33, arg$32, arg$31, arg$30, arg$29, arg$28, arg$27, arg$26, arg$25, arg$24, arg$23, arg$22, arg$21, arg$20, arg$19, arg$18, arg$17, arg$16, arg$15, arg$14, arg$13, arg$12, arg$11, arg$10, arg$9, arg$8, arg$7, arg$6, arg$5, arg$4, arg$3, arg$2, $fpgm_24_56]
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6 ADD F26Dot6 SUB F26Dot6]
INFO: :[pc] fpgm.421->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$fpgm_24_59: $fpgm_24_58, $prep_1015: $prep_1016, $prep_748: $prep_749, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, arg$4: $prep_759, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, arg$3: $prep_751, $prep_743: $fpgm_11_742, $prep_748: $prep_749, $prep_749: $prep_750, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_744: $fpgm_11_743, $prep_744: $fpgm_11_743, $prep_1016: $prep_1015, $fpgm_84_1: $fpgm_84_2, $prep_1015: $prep_1016, $prep_744: $fpgm_11_743}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, 2, 14, 172, 18, $fpgm_24_55], program_stack_length = 55
INFO: :program pointer back (if) to [fpgm.419] IF, stack height 56
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6 ADD F26Dot6 SUB F26Dot6, 26]
INFO: :[pc] fpgm.419->IF|[]
INFO: :     succs are [JMPR([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 1
INFO: :entering if block (repeat) for $fpgm_24_57@fpgm.419, stack height is 56
INFO: :traverse new branch old_state 1 [fpgm.419] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6 ADD F26Dot6 SUB F26Dot6, 26]
INFO: :[pc] fpgm.421->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6 ADD F26Dot6 SUB F26Dot6, 26]
INFO: :[pc] fpgm.422->POP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6 ADD F26Dot6 SUB F26Dot6]
INFO: :[pc] fpgm.424->POP|[]
INFO: :     succs are [PUSHB([26, 26, 64])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18]
INFO: :[pc] fpgm.425->PUSHB|[26, 26, 64]
INFO: :     succs are [PUSHW([-32, 26])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64]
INFO: :[pc] fpgm.426->PUSHW|[-32, 26]
INFO: :     succs are [RCVT([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64, -32, 26]
INFO: :[pc] fpgm.427->RCVT|[]
INFO: :     succs are [DUP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64, -32, cvt_table[26]]
INFO: :[pc] fpgm.428->DUP|[]
INFO: :     succs are [ROLL([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64, -32, cvt_table[26], cvt_table[26]]
INFO: :[pc] fpgm.429->ROLL|[]
INFO: :     succs are [EQ([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64, cvt_table[26], cvt_table[26], -32]
INFO: :[pc] fpgm.430->EQ|[]
INFO: :     succs are [IF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64, cvt_table[26], -32 EQ cvt_table[26]]
INFO: :[pc] fpgm.431->IF|[]
INFO: :     succs are [SWAP([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :entering if block (first time) for $fpgm_24_59, stack height is 58
INFO: :traverse new branch old_state 0 [fpgm.431] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64, cvt_table[26]]
INFO: :[pc] fpgm.432->SWAP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, cvt_table[26], 64]
INFO: :[pc] fpgm.433->POP|[]
INFO: :     succs are [PUSHB([63])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, cvt_table[26]]
INFO: :[pc] fpgm.434->PUSHB|[63]
INFO: :     succs are [ELSE([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, cvt_table[26], 63]
INFO: :[pc] fpgm.435->ELSE|[]
INFO: :     succs are [SWAP([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, arg$4: $prep_759, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_743: $fpgm_11_742, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $prep_748: $prep_749, $prep_744: $fpgm_11_743, $prep_1016: $prep_1015, $prep_1015: $prep_1016, $prep_749: $prep_750, $prep_748: $prep_749, arg$3: $prep_751, $fpgm_84_1: $fpgm_84_2, $fpgm_24_59: $fpgm_24_58, $prep_744: $fpgm_11_743}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 172, 18, 26, 26, cvt_table[$fpgm_24_59], 63], program_stack_length = 58
INFO: :program pointer back (if) to [fpgm.431] IF, stack height 58
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64, cvt_table[26]]
INFO: :[pc] fpgm.431->IF|[]
INFO: :     succs are [SWAP([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 1
INFO: :entering if block (repeat) for $fpgm_24_59@fpgm.431, stack height is 58
INFO: :traverse new branch old_state 1 [fpgm.431] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64, cvt_table[26]]
INFO: :[pc] fpgm.435->ELSE|[]
INFO: :     succs are [SWAP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64, cvt_table[26]]
INFO: :[pc] fpgm.436->SWAP|[]
INFO: :     succs are [EIF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, cvt_table[26], 64]
INFO: :[pc] fpgm.437->EIF|[]
INFO: :     succs are [SUB([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$prep_1015: $prep_1016, $prep_744: $fpgm_11_743, $prep_1016: $prep_1015, $fpgm_24_59: $fpgm_24_58, $prep_743: $fpgm_11_742, $prep_1015: $prep_1016, $prep_748: $prep_749, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_749: $prep_750, arg$3: $prep_751, $prep_748: $prep_749, $fpgm_84_1: $fpgm_84_2, arg$4: $prep_759, $prep_744: $fpgm_11_743, $prep_743: $fpgm_11_742, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 172, 18, 26, 26, cvt_table[$fpgm_24_59], 64], program_stack_length = 58
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, cvt_table[26], 64]
INFO: :[pc] fpgm.431->IF|[]
INFO: :     succs are [SWAP([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 2
INFO: :entering if block (getting out) for $fpgm_24_59@fpgm.431, stack height is 58
INFO: :traverse new branch old_state 2 [fpgm.431] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, cvt_table[26], 64]
INFO: :[pc] fpgm.437->EIF|[]
INFO: :     succs are [SUB([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$prep_1015: $prep_1016, $prep_744: $fpgm_11_743, $prep_1016: $prep_1015, $fpgm_24_59: $fpgm_24_58, $prep_743: $fpgm_11_742, $prep_1015: $prep_1016, $prep_748: $prep_749, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_749: $prep_750, arg$3: $prep_751, $prep_748: $prep_749, $fpgm_84_1: $fpgm_84_2, arg$4: $prep_759, $prep_744: $fpgm_11_743, $prep_743: $fpgm_11_742, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 172, 18, 26, 26, cvt_table[$fpgm_24_59], 64], program_stack_length = 58
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, cvt_table[26], 64]
INFO: :[pc] fpgm.431->IF|[]
INFO: :     succs are [SWAP([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 3
INFO: :entering if block (repeat) for $fpgm_24_59@fpgm.431, stack height is 58
INFO: :traverse new branch old_state 3 [fpgm.431] IF
INFO: :alts_count 2 state 3
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, cvt_table[26], 64]
INFO: :[pc] fpgm.438->SUB|[]
INFO: :     succs are [WCVTP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64 SUB cvt_table[26]]
INFO: :[pc] fpgm.439->WCVTP|[]
INFO: :     succs are [JMPR([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26]
INFO: :[pc] fpgm.440->JMPR|[]
INFO: :     succs are [EIF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26]
INFO: :relative jump target is ENDF([])
INFO: :     adjusted succs now [PUSHB([20, 0])]
INFO: :executing JMPR with dest PUSHB([20, 0]), cond None, stack height is 55, program_stack is [arg$55, arg$54, arg$53, arg$52, arg$51, arg$50, arg$49, arg$48, arg$47, arg$46, arg$45, arg$44, arg$43, arg$42, arg$41, arg$40, arg$39, arg$38, arg$37, arg$36, arg$35, arg$34, arg$33, arg$32, arg$31, arg$30, arg$29, arg$28, arg$27, arg$26, arg$25, arg$24, arg$23, arg$22, arg$21, arg$20, arg$19, arg$18, arg$17, arg$16, arg$15, arg$14, arg$13, arg$12, arg$11, arg$10, arg$9, arg$8, arg$7, arg$6, arg$5, arg$4, arg$3, arg$2, $fpgm_24_56]
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6 ADD F26Dot6 SUB F26Dot6]
INFO: :[pc] fpgm.441->PUSHB|[20, 0]
INFO: :     succs are [ROLL([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6 ADD F26Dot6 SUB F26Dot6, 20, 0]
INFO: :[pc] fpgm.442->ROLL|[]
INFO: :     succs are [GT([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 20, 0, F26Dot6 ADD F26Dot6 SUB F26Dot6]
INFO: :[pc] fpgm.443->GT|[]
INFO: :     succs are [JROF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 20, F26Dot6 ADD F26Dot6 SUB F26Dot6 GT 0]
INFO: :[pc] fpgm.444->JROF|[]
INFO: :     succs are [PUSHB([25, 64, 32, 25])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 20, F26Dot6 ADD F26Dot6 SUB F26Dot6 GT 0]
INFO: :[pc] fpgm.444->IF|[]
INFO: :     succs are [JMPR([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :entering if block (first time) for $fpgm_24_56, stack height is 55
INFO: :traverse new branch old_state 0 [fpgm.444] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 20]
INFO: :[pc] fpgm.445->JMPR|[]
INFO: :     succs are [ELSE([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 20]
INFO: :relative jump target is ENDF([])
INFO: :     adjusted succs now [ENDF([])]
INFO: :executing JMPR with dest ENDF([]), cond None, stack height is 54, program_stack is [arg$55, arg$54, arg$53, arg$52, arg$51, arg$50, arg$49, arg$48, arg$47, arg$46, arg$45, arg$44, arg$43, arg$42, arg$41, arg$40, arg$39, arg$38, arg$37, arg$36, arg$35, arg$34, arg$33, arg$32, arg$31, arg$30, arg$29, arg$28, arg$27, arg$26, arg$25, arg$24, arg$23, arg$22, arg$21, arg$20, arg$19, arg$18, arg$17, arg$16, arg$15, arg$14, arg$13, arg$12, arg$11, arg$10, arg$9, arg$8, arg$7, arg$6, arg$5, arg$4, arg$3, arg$2]
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18]
INFO: :[pc] fpgm.446->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {arg$4: $prep_759, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_1015: $prep_1016, $prep_748: $prep_749, $prep_1016: $prep_1015, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_744: $fpgm_11_743, $prep_744: $fpgm_11_743, arg$3: $prep_751, $prep_749: $prep_750, $prep_748: $prep_749, $prep_1015: $prep_1016, $fpgm_24_59: $fpgm_24_58}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 31, 14, 2, 14, 172, 18], program_stack_length = 54
INFO: :program pointer back (if) to [fpgm.444] IF, stack height 55
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 20]
INFO: :[pc] fpgm.444->IF|[]
INFO: :     succs are [JMPR([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 1
INFO: :entering if block (repeat) for $fpgm_24_56@fpgm.444, stack height is 55
INFO: :traverse new branch old_state 1 [fpgm.444] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 20]
INFO: :[pc] fpgm.446->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 20]
INFO: :[pc] fpgm.447->POP|[]
INFO: :     succs are [PUSHB([25, 64, 32, 25])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18]
INFO: :[pc] fpgm.449->PUSHB|[25, 64, 32, 25]
INFO: :     succs are [RCVT([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 25, 64, 32, 25]
INFO: :[pc] fpgm.450->RCVT|[]
INFO: :     succs are [DUP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 25, 64, 32, cvt_table[25]]
INFO: :[pc] fpgm.451->DUP|[]
INFO: :     succs are [ROLL([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 25, 64, 32, cvt_table[25], cvt_table[25]]
INFO: :[pc] fpgm.452->ROLL|[]
INFO: :     succs are [EQ([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 25, 64, cvt_table[25], cvt_table[25], 32]
INFO: :[pc] fpgm.453->EQ|[]
INFO: :     succs are [IF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 25, 64, cvt_table[25], 32 EQ cvt_table[25]]
INFO: :[pc] fpgm.454->IF|[]
INFO: :     succs are [SWAP([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :entering if block (first time) for $fpgm_24_58, stack height is 57
INFO: :traverse new branch old_state 0 [fpgm.454] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 25, 64, cvt_table[25]]
INFO: :[pc] fpgm.455->SWAP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 25, cvt_table[25], 64]
INFO: :[pc] fpgm.456->POP|[]
INFO: :     succs are [PUSHB([63])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 25, cvt_table[25]]
INFO: :[pc] fpgm.457->PUSHB|[63]
INFO: :     succs are [ELSE([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 25, cvt_table[25], 63]
INFO: :[pc] fpgm.458->ELSE|[]
INFO: :     succs are [SWAP([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$fpgm_24_59: $fpgm_24_58, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_1015: $prep_1016, $prep_743: $fpgm_11_742, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, arg$3: $prep_751, $prep_1015: $prep_1016, $prep_748: $prep_749, arg$4: $prep_759, $prep_743: $fpgm_11_742, $prep_749: $prep_750, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_1016: $prep_1015, $prep_748: $prep_749, $prep_744: $fpgm_11_743}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, 172, 18, 25, cvt_table[$fpgm_24_58], 63], program_stack_length = 57
INFO: :program pointer back (if) to [fpgm.454] IF, stack height 57
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 25, 64, cvt_table[25]]
INFO: :[pc] fpgm.454->IF|[]
INFO: :     succs are [SWAP([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 1
INFO: :entering if block (repeat) for $fpgm_24_58@fpgm.454, stack height is 57
INFO: :traverse new branch old_state 1 [fpgm.454] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 25, 64, cvt_table[25]]
INFO: :[pc] fpgm.458->ELSE|[]
INFO: :     succs are [SWAP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 25, 64, cvt_table[25]]
INFO: :[pc] fpgm.459->SWAP|[]
INFO: :     succs are [EIF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 25, cvt_table[25], 64]
INFO: :[pc] fpgm.460->EIF|[]
INFO: :     succs are [SUB([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, arg$4: $prep_759, arg$3: $prep_751, $prep_744: $fpgm_11_743, $prep_1016: $prep_1015, $prep_748: $prep_749, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_1015: $prep_1016, $prep_1015: $prep_1016, $prep_749: $prep_750, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_24_59: $fpgm_24_58, $prep_744: $fpgm_11_743, $prep_748: $prep_749, $fpgm_84_1: $fpgm_84_2}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, 172, 18, 25, cvt_table[$fpgm_24_58], 64], program_stack_length = 57
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 25, cvt_table[25], 64]
INFO: :[pc] fpgm.454->IF|[]
INFO: :     succs are [SWAP([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 2
INFO: :entering if block (getting out) for $fpgm_24_58@fpgm.454, stack height is 57
INFO: :traverse new branch old_state 2 [fpgm.454] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 25, cvt_table[25], 64]
INFO: :[pc] fpgm.460->EIF|[]
INFO: :     succs are [SUB([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, arg$4: $prep_759, arg$3: $prep_751, $prep_744: $fpgm_11_743, $prep_1016: $prep_1015, $prep_748: $prep_749, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_1015: $prep_1016, $prep_1015: $prep_1016, $prep_749: $prep_750, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_24_59: $fpgm_24_58, $prep_744: $fpgm_11_743, $prep_748: $prep_749, $fpgm_84_1: $fpgm_84_2}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, 172, 18, 25, cvt_table[$fpgm_24_58], 64], program_stack_length = 57
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 25, cvt_table[25], 64]
INFO: :[pc] fpgm.454->IF|[]
INFO: :     succs are [SWAP([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 3
INFO: :entering if block (repeat) for $fpgm_24_58@fpgm.454, stack height is 57
INFO: :traverse new branch old_state 3 [fpgm.454] IF
INFO: :alts_count 2 state 3
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 25, cvt_table[25], 64]
INFO: :[pc] fpgm.461->SUB|[]
INFO: :     succs are [WCVTP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 25, 64 SUB cvt_table[25]]
INFO: :[pc] fpgm.462->WCVTP|[]
INFO: :     succs are [EIF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18]
INFO: :[pc] fpgm.448->EIF|[]
INFO: :     succs are [ENDF([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, arg$4: $prep_759, arg$3: $prep_751, $prep_744: $fpgm_11_743, $prep_1016: $prep_1015, $prep_748: $prep_749, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_1015: $prep_1016, $prep_1015: $prep_1016, $prep_749: $prep_750, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_24_59: $fpgm_24_58, $prep_744: $fpgm_11_743, $prep_748: $prep_749, $fpgm_84_1: $fpgm_84_2}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 31, 14, 2, 14, 172, 18], program_stack_length = 54
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18]
INFO: :[pc] fpgm.444->IF|[]
INFO: :     succs are [JMPR([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 2
INFO: :entering if block (getting out) for $fpgm_24_58@fpgm.444, stack height is 54
INFO: :traverse new branch old_state 2 [fpgm.444] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18]
INFO: :[pc] fpgm.448->EIF|[]
INFO: :     succs are [ENDF([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, arg$4: $prep_759, arg$3: $prep_751, $prep_744: $fpgm_11_743, $prep_1016: $prep_1015, $prep_748: $prep_749, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_1015: $prep_1016, $prep_1015: $prep_1016, $prep_749: $prep_750, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_24_59: $fpgm_24_58, $prep_744: $fpgm_11_743, $prep_748: $prep_749, $fpgm_84_1: $fpgm_84_2}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 31, 14, 2, 14, 172, 18], program_stack_length = 54
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18]
INFO: :[pc] fpgm.444->IF|[]
INFO: :     succs are [JMPR([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 3
INFO: :entering if block (repeat) for $fpgm_24_58@fpgm.444, stack height is 54
INFO: :traverse new branch old_state 3 [fpgm.444] IF
INFO: :alts_count 2 state 3
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18]
INFO: :[pc] fpgm.421->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, arg$4: $prep_759, arg$3: $prep_751, $prep_744: $fpgm_11_743, $prep_1016: $prep_1015, $prep_748: $prep_749, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_1015: $prep_1016, $prep_1015: $prep_1016, $prep_749: $prep_750, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_24_59: $fpgm_24_58, $prep_744: $fpgm_11_743, $prep_748: $prep_749, $fpgm_84_1: $fpgm_84_2}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 31, 14, 2, 14, 172, 18], program_stack_length = 54
INFO: :program pointer back (if) to [fpgm.419] IF, stack height 55
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6 ADD F26Dot6 SUB F26Dot6]
INFO: :[pc] fpgm.419->IF|[]
INFO: :     succs are [PUSHB([20, 0]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 1
INFO: :entering if block (repeat) for $fpgm_24_58@fpgm.419, stack height is 55
INFO: :traverse new branch old_state 1 [fpgm.419] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6 ADD F26Dot6 SUB F26Dot6]
INFO: :[pc] fpgm.421->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, F26Dot6 ADD F26Dot6 SUB F26Dot6]
INFO: :[pc] fpgm.424->POP|[]
INFO: :     succs are [PUSHB([26, 26, 64])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18]
INFO: :[pc] fpgm.425->PUSHB|[26, 26, 64]
INFO: :     succs are [PUSHW([-32, 26])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64]
INFO: :[pc] fpgm.426->PUSHW|[-32, 26]
INFO: :     succs are [RCVT([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64, -32, 26]
INFO: :[pc] fpgm.427->RCVT|[]
INFO: :     succs are [DUP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64, -32, cvt_table[26]]
INFO: :[pc] fpgm.428->DUP|[]
INFO: :     succs are [ROLL([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64, -32, cvt_table[26], cvt_table[26]]
INFO: :[pc] fpgm.429->ROLL|[]
INFO: :     succs are [EQ([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64, cvt_table[26], cvt_table[26], -32]
INFO: :[pc] fpgm.430->EQ|[]
INFO: :     succs are [IF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64, cvt_table[26], -32 EQ cvt_table[26]]
INFO: :[pc] fpgm.431->IF|[]
INFO: :     succs are [SWAP([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :entering if block (first time) for $fpgm_24_59, stack height is 58
INFO: :traverse new branch old_state 0 [fpgm.431] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64, cvt_table[26]]
INFO: :[pc] fpgm.432->SWAP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, cvt_table[26], 64]
INFO: :[pc] fpgm.433->POP|[]
INFO: :     succs are [PUSHB([63])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, cvt_table[26]]
INFO: :[pc] fpgm.434->PUSHB|[63]
INFO: :     succs are [ELSE([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, cvt_table[26], 63]
INFO: :[pc] fpgm.435->ELSE|[]
INFO: :     succs are [SWAP([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$prep_748: $prep_749, $prep_748: $prep_749, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $prep_749: $prep_750, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $prep_1016: $prep_1015, $prep_1015: $prep_1016, $fpgm_24_59: $fpgm_24_58, arg$3: $prep_751, $prep_744: $fpgm_11_743, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, arg$4: $prep_759, $fpgm_84_1: $fpgm_84_2}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 172, 18, 26, 26, cvt_table[$fpgm_24_59], 63], program_stack_length = 58
INFO: :program pointer back (if) to [fpgm.431] IF, stack height 58
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64, cvt_table[26]]
INFO: :[pc] fpgm.431->IF|[]
INFO: :     succs are [SWAP([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 1
INFO: :entering if block (repeat) for $fpgm_24_59@fpgm.431, stack height is 58
INFO: :traverse new branch old_state 1 [fpgm.431] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64, cvt_table[26]]
INFO: :[pc] fpgm.435->ELSE|[]
INFO: :     succs are [SWAP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64, cvt_table[26]]
INFO: :[pc] fpgm.436->SWAP|[]
INFO: :     succs are [EIF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, cvt_table[26], 64]
INFO: :[pc] fpgm.437->EIF|[]
INFO: :     succs are [SUB([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$prep_1015: $prep_1016, arg$4: $prep_759, $prep_743: $fpgm_11_742, $prep_744: $fpgm_11_743, $prep_1016: $prep_1015, $prep_743: $fpgm_11_742, $prep_749: $prep_750, arg$3: $prep_751, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $prep_748: $prep_749, $prep_744: $fpgm_11_743, $prep_1015: $prep_1016, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_24_59: $fpgm_24_58, $prep_748: $prep_749}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 172, 18, 26, 26, cvt_table[$fpgm_24_59], 64], program_stack_length = 58
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, cvt_table[26], 64]
INFO: :[pc] fpgm.431->IF|[]
INFO: :     succs are [SWAP([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 2
INFO: :entering if block (getting out) for $fpgm_24_59@fpgm.431, stack height is 58
INFO: :traverse new branch old_state 2 [fpgm.431] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, cvt_table[26], 64]
INFO: :[pc] fpgm.437->EIF|[]
INFO: :     succs are [SUB([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$prep_1015: $prep_1016, arg$4: $prep_759, $prep_743: $fpgm_11_742, $prep_744: $fpgm_11_743, $prep_1016: $prep_1015, $prep_743: $fpgm_11_742, $prep_749: $prep_750, arg$3: $prep_751, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $prep_748: $prep_749, $prep_744: $fpgm_11_743, $prep_1015: $prep_1016, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_24_59: $fpgm_24_58, $prep_748: $prep_749}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 172, 18, 26, 26, cvt_table[$fpgm_24_59], 64], program_stack_length = 58
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, cvt_table[26], 64]
INFO: :[pc] fpgm.431->IF|[]
INFO: :     succs are [SWAP([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 3
INFO: :entering if block (repeat) for $fpgm_24_59@fpgm.431, stack height is 58
INFO: :traverse new branch old_state 3 [fpgm.431] IF
INFO: :alts_count 2 state 3
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, cvt_table[26], 64]
INFO: :[pc] fpgm.438->SUB|[]
INFO: :     succs are [WCVTP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26, 26, 64 SUB cvt_table[26]]
INFO: :[pc] fpgm.439->WCVTP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18, 26]
INFO: :[pc] fpgm.422->POP|[]
INFO: :     succs are [EIF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18]
INFO: :[pc] fpgm.423->EIF|[]
INFO: :     succs are [ENDF([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$prep_1015: $prep_1016, arg$4: $prep_759, $prep_743: $fpgm_11_742, $prep_744: $fpgm_11_743, $prep_1016: $prep_1015, $prep_743: $fpgm_11_742, $prep_749: $prep_750, arg$3: $prep_751, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $prep_748: $prep_749, $prep_744: $fpgm_11_743, $prep_1015: $prep_1016, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_24_59: $fpgm_24_58, $prep_748: $prep_749}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 31, 14, 2, 14, 172, 18], program_stack_length = 54
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18]
INFO: :[pc] fpgm.419->IF|[]
INFO: :     succs are [PUSHB([20, 0]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 2
INFO: :entering if block (getting out) for $fpgm_24_59@fpgm.419, stack height is 54
INFO: :traverse new branch old_state 2 [fpgm.419] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18]
INFO: :[pc] fpgm.423->EIF|[]
INFO: :     succs are [ENDF([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$prep_1015: $prep_1016, arg$4: $prep_759, $prep_743: $fpgm_11_742, $prep_744: $fpgm_11_743, $prep_1016: $prep_1015, $prep_743: $fpgm_11_742, $prep_749: $prep_750, arg$3: $prep_751, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $prep_748: $prep_749, $prep_744: $fpgm_11_743, $prep_1015: $prep_1016, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_24_59: $fpgm_24_58, $prep_748: $prep_749}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 31, 14, 2, 14, 172, 18], program_stack_length = 54
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18]
INFO: :[pc] fpgm.419->IF|[]
INFO: :     succs are [PUSHB([20, 0]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 3
INFO: :entering if block (repeat) for $fpgm_24_59@fpgm.419, stack height is 54
INFO: :traverse new branch old_state 3 [fpgm.419] IF
INFO: :alts_count 2 state 3
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18]
INFO: :[pc] fpgm.423->EIF|[]
INFO: :     succs are [ENDF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18]
INFO: :[pc] fpgm.463->ENDF|[]
INFO: :     succs are []
INFO: :     call_stack len is 1
INFO: :pop call stack, next is SRP0([])
INFO: :stack used 2/stack additional -2
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172, 18]
INFO: :[pc] glyf.parenright.14->SRP0|[]
INFO: :     succs are [MIRP(['10110'])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2, 14, 172]
INFO: :[pc] glyf.parenright.15->MIRP|['10110']
INFO: :     succs are [DELTAP1([])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85, 15, 14, 31, 14, 2]
INFO: :[pc] glyf.parenright.16->DELTAP1|[]
INFO: :     succs are [CALL([])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 85]
INFO: :[pc] glyf.parenright.17->CALL|[]
INFO: :     succs are [CALL([])]
INFO: :     call_stack len is 0
INFO: :in glyf.parenright, calling function 85
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2]
INFO: :[pc] fpgm.1249->PUSHB|[2]
INFO: :     succs are [RS([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, 2]
INFO: :[pc] fpgm.1250->RS|[]
INFO: :     succs are [EQ([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, 2, AbstractValue]
INFO: :[pc] fpgm.1251->EQ|[]
INFO: :     succs are [IF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, AbstractValue EQ 2]
INFO: :[pc] fpgm.1252->IF|[]
INFO: :     succs are [MPPEM([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :entering if block (first time) for $fpgm_85_45, stack height is 44
INFO: :traverse new branch old_state 0 [fpgm.1252] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10]
INFO: :[pc] fpgm.1253->MPPEM|[]
INFO: :     succs are [GTEQ([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10, PPEM_Y]
INFO: :[pc] fpgm.1254->GTEQ|[]
INFO: :     succs are [SWAP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, PPEM_Y GTEQ 10]
INFO: :[pc] fpgm.1255->SWAP|[]
INFO: :     succs are [MPPEM([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, PPEM_Y GTEQ 10, 10]
INFO: :[pc] fpgm.1256->MPPEM|[]
INFO: :     succs are [LTEQ([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, PPEM_Y GTEQ 10, 10, PPEM_Y]
INFO: :[pc] fpgm.1257->LTEQ|[]
INFO: :     succs are [AND([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, PPEM_Y GTEQ 10, PPEM_Y LTEQ 10]
INFO: :[pc] fpgm.1258->AND|[]
INFO: :     succs are [IF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, PPEM_Y LTEQ 10 AND PPEM_Y GTEQ 10]
INFO: :[pc] fpgm.1259->IF|[]
INFO: :     succs are [SHPIX([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :entering if block (first time) for $fpgm_85_43, stack height is 42
INFO: :traverse new branch old_state 0 [fpgm.1259] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20]
INFO: :[pc] fpgm.1260->SHPIX|[]
INFO: :     succs are [ELSE([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85]
INFO: :[pc] fpgm.1261->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$prep_1015: $prep_1016, arg$4: $prep_759, $prep_743: $fpgm_11_742, $prep_744: $fpgm_11_743, $prep_1016: $prep_1015, $prep_743: $fpgm_11_742, $prep_749: $prep_750, arg$3: $prep_751, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $prep_748: $prep_749, $prep_744: $fpgm_11_743, $prep_1015: $prep_1016, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_24_59: $fpgm_24_58, $prep_748: $prep_749}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, -28, 13, 13, 2, 85], program_stack_length = 40
INFO: :program pointer back (if) to [fpgm.1259] IF, stack height 42
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20]
INFO: :[pc] fpgm.1259->IF|[]
INFO: :     succs are [SHPIX([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 1
INFO: :entering if block (repeat) for $fpgm_85_43@fpgm.1259, stack height is 42
INFO: :traverse new branch old_state 1 [fpgm.1259] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20]
INFO: :[pc] fpgm.1261->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20]
INFO: :[pc] fpgm.1262->POP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14]
INFO: :[pc] fpgm.1263->POP|[]
INFO: :     succs are [EIF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85]
INFO: :[pc] fpgm.1264->EIF|[]
INFO: :     succs are [ELSE([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, arg$4: $prep_759, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_1015: $prep_1016, $prep_749: $prep_750, $fpgm_84_1: $fpgm_84_2, $prep_748: $prep_749, $prep_744: $fpgm_11_743, arg$3: $prep_751, $prep_748: $prep_749, $prep_1015: $prep_1016, $prep_1016: $prep_1015, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $fpgm_24_59: $fpgm_24_58}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, -28, 13, 13, 2, 85], program_stack_length = 40
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85]
INFO: :[pc] fpgm.1259->IF|[]
INFO: :     succs are [SHPIX([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 2
INFO: :entering if block (getting out) for $fpgm_85_43@fpgm.1259, stack height is 40
INFO: :traverse new branch old_state 2 [fpgm.1259] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85]
INFO: :[pc] fpgm.1264->EIF|[]
INFO: :     succs are [ELSE([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, arg$4: $prep_759, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_1015: $prep_1016, $prep_749: $prep_750, $fpgm_84_1: $fpgm_84_2, $prep_748: $prep_749, $prep_744: $fpgm_11_743, arg$3: $prep_751, $prep_748: $prep_749, $prep_1015: $prep_1016, $prep_1016: $prep_1015, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $fpgm_24_59: $fpgm_24_58}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, -28, 13, 13, 2, 85], program_stack_length = 40
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85]
INFO: :[pc] fpgm.1259->IF|[]
INFO: :     succs are [SHPIX([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 3
INFO: :entering if block (repeat) for $fpgm_85_43@fpgm.1259, stack height is 40
INFO: :traverse new branch old_state 3 [fpgm.1259] IF
INFO: :alts_count 2 state 3
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85]
INFO: :[pc] fpgm.1265->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, arg$4: $prep_759, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_1015: $prep_1016, $prep_749: $prep_750, $fpgm_84_1: $fpgm_84_2, $prep_748: $prep_749, $prep_744: $fpgm_11_743, arg$3: $prep_751, $prep_748: $prep_749, $prep_1015: $prep_1016, $prep_1016: $prep_1015, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $fpgm_24_59: $fpgm_24_58}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, -28, 13, 13, 2, 85], program_stack_length = 40
INFO: :program pointer back (if) to [fpgm.1252] IF, stack height 44
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10]
INFO: :[pc] fpgm.1252->IF|[]
INFO: :     succs are [MPPEM([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 1
INFO: :entering if block (repeat) for $fpgm_85_43@fpgm.1252, stack height is 44
INFO: :traverse new branch old_state 1 [fpgm.1252] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10]
INFO: :[pc] fpgm.1265->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10, 10]
INFO: :[pc] fpgm.1266->POP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20, 10]
INFO: :[pc] fpgm.1267->POP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14, -20]
INFO: :[pc] fpgm.1268->POP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85, 14]
INFO: :[pc] fpgm.1269->POP|[]
INFO: :     succs are [EIF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85]
INFO: :[pc] fpgm.1270->EIF|[]
INFO: :     succs are [ENDF([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$prep_744: $fpgm_11_743, $prep_748: $prep_749, $prep_1016: $prep_1015, $prep_743: $fpgm_11_742, $fpgm_24_59: $fpgm_24_58, $prep_1015: $prep_1016, arg$3: $prep_751, $prep_744: $fpgm_11_743, arg$4: $prep_759, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $prep_749: $prep_750, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_748: $prep_749, $prep_743: $fpgm_11_742, $prep_743: $fpgm_11_742}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, -28, 13, 13, 2, 85], program_stack_length = 40
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85]
INFO: :[pc] fpgm.1252->IF|[]
INFO: :     succs are [MPPEM([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 2
INFO: :entering if block (getting out) for $fpgm_85_43@fpgm.1252, stack height is 40
INFO: :traverse new branch old_state 2 [fpgm.1252] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85]
INFO: :[pc] fpgm.1270->EIF|[]
INFO: :     succs are [ENDF([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$prep_744: $fpgm_11_743, $prep_748: $prep_749, $prep_1016: $prep_1015, $prep_743: $fpgm_11_742, $fpgm_24_59: $fpgm_24_58, $prep_1015: $prep_1016, arg$3: $prep_751, $prep_744: $fpgm_11_743, arg$4: $prep_759, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $prep_749: $prep_750, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_748: $prep_749, $prep_743: $fpgm_11_742, $prep_743: $fpgm_11_742}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, -28, 13, 13, 2, 85], program_stack_length = 40
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85]
INFO: :[pc] fpgm.1252->IF|[]
INFO: :     succs are [MPPEM([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 3
INFO: :entering if block (repeat) for $fpgm_85_43@fpgm.1252, stack height is 40
INFO: :traverse new branch old_state 3 [fpgm.1252] IF
INFO: :alts_count 2 state 3
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85]
INFO: :[pc] fpgm.1271->ENDF|[]
INFO: :     succs are []
INFO: :     call_stack len is 1
INFO: :pop call stack, next is CALL([])
INFO: :stack used 5/stack additional -5
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 85]
INFO: :[pc] glyf.parenright.18->CALL|[]
INFO: :     succs are [CALL([])]
INFO: :     call_stack len is 0
INFO: :in glyf.parenright, calling function 85
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2]
INFO: :[pc] fpgm.1249->PUSHB|[2]
INFO: :     succs are [RS([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, 2]
INFO: :[pc] fpgm.1250->RS|[]
INFO: :     succs are [EQ([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, 2, AbstractValue]
INFO: :[pc] fpgm.1251->EQ|[]
INFO: :     succs are [IF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, AbstractValue EQ 2]
INFO: :[pc] fpgm.1252->IF|[]
INFO: :     succs are [MPPEM([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :entering if block (first time) for $fpgm_85_39, stack height is 38
INFO: :traverse new branch old_state 0 [fpgm.1252] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13]
INFO: :[pc] fpgm.1253->MPPEM|[]
INFO: :     succs are [GTEQ([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13, PPEM_Y]
INFO: :[pc] fpgm.1254->GTEQ|[]
INFO: :     succs are [SWAP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, PPEM_Y GTEQ 13]
INFO: :[pc] fpgm.1255->SWAP|[]
INFO: :     succs are [MPPEM([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, PPEM_Y GTEQ 13, 13]
INFO: :[pc] fpgm.1256->MPPEM|[]
INFO: :     succs are [LTEQ([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, PPEM_Y GTEQ 13, 13, PPEM_Y]
INFO: :[pc] fpgm.1257->LTEQ|[]
INFO: :     succs are [AND([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, PPEM_Y GTEQ 13, PPEM_Y LTEQ 13]
INFO: :[pc] fpgm.1258->AND|[]
INFO: :     succs are [IF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, PPEM_Y LTEQ 13 AND PPEM_Y GTEQ 13]
INFO: :[pc] fpgm.1259->IF|[]
INFO: :     succs are [SHPIX([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :entering if block (first time) for $fpgm_85_37, stack height is 36
INFO: :traverse new branch old_state 0 [fpgm.1259] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28]
INFO: :[pc] fpgm.1260->SHPIX|[]
INFO: :     succs are [ELSE([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85]
INFO: :[pc] fpgm.1261->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$prep_744: $fpgm_11_743, $prep_748: $prep_749, $prep_1016: $prep_1015, $prep_743: $fpgm_11_742, $fpgm_24_59: $fpgm_24_58, $prep_1015: $prep_1016, arg$3: $prep_751, $prep_744: $fpgm_11_743, arg$4: $prep_759, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $prep_749: $prep_750, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_748: $prep_749, $prep_743: $fpgm_11_742, $prep_743: $fpgm_11_742}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, -8, 15, 15, 2, 85], program_stack_length = 34
INFO: :program pointer back (if) to [fpgm.1259] IF, stack height 36
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28]
INFO: :[pc] fpgm.1259->IF|[]
INFO: :     succs are [SHPIX([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 1
INFO: :entering if block (repeat) for $fpgm_85_37@fpgm.1259, stack height is 36
INFO: :traverse new branch old_state 1 [fpgm.1259] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28]
INFO: :[pc] fpgm.1261->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28]
INFO: :[pc] fpgm.1262->POP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14]
INFO: :[pc] fpgm.1263->POP|[]
INFO: :     succs are [EIF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85]
INFO: :[pc] fpgm.1264->EIF|[]
INFO: :     succs are [ELSE([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$prep_744: $fpgm_11_743, $prep_748: $prep_749, $prep_743: $fpgm_11_742, $prep_743: $fpgm_11_742, $fpgm_24_59: $fpgm_24_58, $prep_749: $prep_750, $prep_748: $prep_749, arg$4: $prep_759, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, arg$3: $prep_751, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $prep_1016: $prep_1015, $prep_744: $fpgm_11_743, $prep_744: $fpgm_11_743, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, -8, 15, 15, 2, 85], program_stack_length = 34
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85]
INFO: :[pc] fpgm.1259->IF|[]
INFO: :     succs are [SHPIX([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 2
INFO: :entering if block (getting out) for $fpgm_85_37@fpgm.1259, stack height is 34
INFO: :traverse new branch old_state 2 [fpgm.1259] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85]
INFO: :[pc] fpgm.1264->EIF|[]
INFO: :     succs are [ELSE([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$prep_744: $fpgm_11_743, $prep_748: $prep_749, $prep_743: $fpgm_11_742, $prep_743: $fpgm_11_742, $fpgm_24_59: $fpgm_24_58, $prep_749: $prep_750, $prep_748: $prep_749, arg$4: $prep_759, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, arg$3: $prep_751, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $prep_1016: $prep_1015, $prep_744: $fpgm_11_743, $prep_744: $fpgm_11_743, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, -8, 15, 15, 2, 85], program_stack_length = 34
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85]
INFO: :[pc] fpgm.1259->IF|[]
INFO: :     succs are [SHPIX([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 3
INFO: :entering if block (repeat) for $fpgm_85_37@fpgm.1259, stack height is 34
INFO: :traverse new branch old_state 3 [fpgm.1259] IF
INFO: :alts_count 2 state 3
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85]
INFO: :[pc] fpgm.1265->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$prep_744: $fpgm_11_743, $prep_748: $prep_749, $prep_743: $fpgm_11_742, $prep_743: $fpgm_11_742, $fpgm_24_59: $fpgm_24_58, $prep_749: $prep_750, $prep_748: $prep_749, arg$4: $prep_759, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, arg$3: $prep_751, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $prep_1016: $prep_1015, $prep_744: $fpgm_11_743, $prep_744: $fpgm_11_743, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, -8, 15, 15, 2, 85], program_stack_length = 34
INFO: :program pointer back (if) to [fpgm.1252] IF, stack height 38
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13]
INFO: :[pc] fpgm.1252->IF|[]
INFO: :     succs are [MPPEM([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 1
INFO: :entering if block (repeat) for $fpgm_85_37@fpgm.1252, stack height is 38
INFO: :traverse new branch old_state 1 [fpgm.1252] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13]
INFO: :[pc] fpgm.1265->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13, 13]
INFO: :[pc] fpgm.1266->POP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28, 13]
INFO: :[pc] fpgm.1267->POP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14, -28]
INFO: :[pc] fpgm.1268->POP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85, 14]
INFO: :[pc] fpgm.1269->POP|[]
INFO: :     succs are [EIF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85]
INFO: :[pc] fpgm.1270->EIF|[]
INFO: :     succs are [ENDF([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {arg$3: $prep_751, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_748: $prep_749, $fpgm_24_59: $fpgm_24_58, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $prep_749: $prep_750, $prep_1016: $prep_1015, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $prep_748: $prep_749, $prep_744: $fpgm_11_743, $prep_744: $fpgm_11_743, $prep_744: $fpgm_11_743, arg$4: $prep_759, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, -8, 15, 15, 2, 85], program_stack_length = 34
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85]
INFO: :[pc] fpgm.1252->IF|[]
INFO: :     succs are [MPPEM([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 2
INFO: :entering if block (getting out) for $fpgm_85_37@fpgm.1252, stack height is 34
INFO: :traverse new branch old_state 2 [fpgm.1252] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85]
INFO: :[pc] fpgm.1270->EIF|[]
INFO: :     succs are [ENDF([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {arg$3: $prep_751, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_748: $prep_749, $fpgm_24_59: $fpgm_24_58, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $prep_749: $prep_750, $prep_1016: $prep_1015, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $prep_748: $prep_749, $prep_744: $fpgm_11_743, $prep_744: $fpgm_11_743, $prep_744: $fpgm_11_743, arg$4: $prep_759, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, -8, 15, 15, 2, 85], program_stack_length = 34
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85]
INFO: :[pc] fpgm.1252->IF|[]
INFO: :     succs are [MPPEM([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 3
INFO: :entering if block (repeat) for $fpgm_85_37@fpgm.1252, stack height is 34
INFO: :traverse new branch old_state 3 [fpgm.1252] IF
INFO: :alts_count 2 state 3
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85]
INFO: :[pc] fpgm.1271->ENDF|[]
INFO: :     succs are []
INFO: :     call_stack len is 1
INFO: :pop call stack, next is CALL([])
INFO: :stack used 5/stack additional -5
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 85]
INFO: :[pc] glyf.parenright.19->CALL|[]
INFO: :     succs are [CALL([])]
INFO: :     call_stack len is 0
INFO: :in glyf.parenright, calling function 85
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2]
INFO: :[pc] fpgm.1249->PUSHB|[2]
INFO: :     succs are [RS([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, 2]
INFO: :[pc] fpgm.1250->RS|[]
INFO: :     succs are [EQ([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, 2, AbstractValue]
INFO: :[pc] fpgm.1251->EQ|[]
INFO: :     succs are [IF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, AbstractValue EQ 2]
INFO: :[pc] fpgm.1252->IF|[]
INFO: :     succs are [MPPEM([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :entering if block (first time) for $fpgm_85_33, stack height is 32
INFO: :traverse new branch old_state 0 [fpgm.1252] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15]
INFO: :[pc] fpgm.1253->MPPEM|[]
INFO: :     succs are [GTEQ([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15, PPEM_Y]
INFO: :[pc] fpgm.1254->GTEQ|[]
INFO: :     succs are [SWAP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, PPEM_Y GTEQ 15]
INFO: :[pc] fpgm.1255->SWAP|[]
INFO: :     succs are [MPPEM([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, PPEM_Y GTEQ 15, 15]
INFO: :[pc] fpgm.1256->MPPEM|[]
INFO: :     succs are [LTEQ([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, PPEM_Y GTEQ 15, 15, PPEM_Y]
INFO: :[pc] fpgm.1257->LTEQ|[]
INFO: :     succs are [AND([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, PPEM_Y GTEQ 15, PPEM_Y LTEQ 15]
INFO: :[pc] fpgm.1258->AND|[]
INFO: :     succs are [IF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, PPEM_Y LTEQ 15 AND PPEM_Y GTEQ 15]
INFO: :[pc] fpgm.1259->IF|[]
INFO: :     succs are [SHPIX([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :entering if block (first time) for $fpgm_85_31, stack height is 30
INFO: :traverse new branch old_state 0 [fpgm.1259] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8]
INFO: :[pc] fpgm.1260->SHPIX|[]
INFO: :     succs are [ELSE([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85]
INFO: :[pc] fpgm.1261->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {arg$3: $prep_751, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_748: $prep_749, $fpgm_24_59: $fpgm_24_58, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $prep_749: $prep_750, $prep_1016: $prep_1015, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $prep_748: $prep_749, $prep_744: $fpgm_11_743, $prep_744: $fpgm_11_743, $prep_744: $fpgm_11_743, arg$4: $prep_759, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, -16, 16, 16, 2, 85], program_stack_length = 28
INFO: :program pointer back (if) to [fpgm.1259] IF, stack height 30
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8]
INFO: :[pc] fpgm.1259->IF|[]
INFO: :     succs are [SHPIX([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 1
INFO: :entering if block (repeat) for $fpgm_85_31@fpgm.1259, stack height is 30
INFO: :traverse new branch old_state 1 [fpgm.1259] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8]
INFO: :[pc] fpgm.1261->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8]
INFO: :[pc] fpgm.1262->POP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14]
INFO: :[pc] fpgm.1263->POP|[]
INFO: :     succs are [EIF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85]
INFO: :[pc] fpgm.1264->EIF|[]
INFO: :     succs are [ELSE([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$fpgm_84_1: $fpgm_84_2, $prep_748: $prep_749, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $fpgm_24_59: $fpgm_24_58, $prep_1016: $prep_1015, $prep_749: $prep_750, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, arg$3: $prep_751, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_748: $prep_749, arg$4: $prep_759, $prep_1015: $prep_1016, $prep_1015: $prep_1016, $prep_744: $fpgm_11_743}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, -16, 16, 16, 2, 85], program_stack_length = 28
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85]
INFO: :[pc] fpgm.1259->IF|[]
INFO: :     succs are [SHPIX([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 2
INFO: :entering if block (getting out) for $fpgm_85_31@fpgm.1259, stack height is 28
INFO: :traverse new branch old_state 2 [fpgm.1259] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85]
INFO: :[pc] fpgm.1264->EIF|[]
INFO: :     succs are [ELSE([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$fpgm_84_1: $fpgm_84_2, $prep_748: $prep_749, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $fpgm_24_59: $fpgm_24_58, $prep_1016: $prep_1015, $prep_749: $prep_750, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, arg$3: $prep_751, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_748: $prep_749, arg$4: $prep_759, $prep_1015: $prep_1016, $prep_1015: $prep_1016, $prep_744: $fpgm_11_743}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, -16, 16, 16, 2, 85], program_stack_length = 28
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85]
INFO: :[pc] fpgm.1259->IF|[]
INFO: :     succs are [SHPIX([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 3
INFO: :entering if block (repeat) for $fpgm_85_31@fpgm.1259, stack height is 28
INFO: :traverse new branch old_state 3 [fpgm.1259] IF
INFO: :alts_count 2 state 3
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85]
INFO: :[pc] fpgm.1265->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$fpgm_84_1: $fpgm_84_2, $prep_748: $prep_749, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $fpgm_24_59: $fpgm_24_58, $prep_1016: $prep_1015, $prep_749: $prep_750, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, arg$3: $prep_751, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_748: $prep_749, arg$4: $prep_759, $prep_1015: $prep_1016, $prep_1015: $prep_1016, $prep_744: $fpgm_11_743}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, -16, 16, 16, 2, 85], program_stack_length = 28
INFO: :program pointer back (if) to [fpgm.1252] IF, stack height 32
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15]
INFO: :[pc] fpgm.1252->IF|[]
INFO: :     succs are [MPPEM([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 1
INFO: :entering if block (repeat) for $fpgm_85_31@fpgm.1252, stack height is 32
INFO: :traverse new branch old_state 1 [fpgm.1252] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15]
INFO: :[pc] fpgm.1265->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15, 15]
INFO: :[pc] fpgm.1266->POP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8, 15]
INFO: :[pc] fpgm.1267->POP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14, -8]
INFO: :[pc] fpgm.1268->POP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85, 14]
INFO: :[pc] fpgm.1269->POP|[]
INFO: :     succs are [EIF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85]
INFO: :[pc] fpgm.1270->EIF|[]
INFO: :     succs are [ENDF([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$prep_744: $fpgm_11_743, $prep_748: $prep_749, $prep_749: $prep_750, arg$3: $prep_751, $prep_1016: $prep_1015, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_1015: $prep_1016, arg$4: $prep_759, $fpgm_24_59: $fpgm_24_58, $prep_744: $fpgm_11_743, $prep_1015: $prep_1016, $prep_743: $fpgm_11_742, $prep_748: $prep_749, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, -16, 16, 16, 2, 85], program_stack_length = 28
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85]
INFO: :[pc] fpgm.1252->IF|[]
INFO: :     succs are [MPPEM([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 2
INFO: :entering if block (getting out) for $fpgm_85_31@fpgm.1252, stack height is 28
INFO: :traverse new branch old_state 2 [fpgm.1252] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85]
INFO: :[pc] fpgm.1270->EIF|[]
INFO: :     succs are [ENDF([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$prep_744: $fpgm_11_743, $prep_748: $prep_749, $prep_749: $prep_750, arg$3: $prep_751, $prep_1016: $prep_1015, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_1015: $prep_1016, arg$4: $prep_759, $fpgm_24_59: $fpgm_24_58, $prep_744: $fpgm_11_743, $prep_1015: $prep_1016, $prep_743: $fpgm_11_742, $prep_748: $prep_749, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 14, -16, 16, 16, 2, 85], program_stack_length = 28
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85]
INFO: :[pc] fpgm.1252->IF|[]
INFO: :     succs are [MPPEM([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 3
INFO: :entering if block (repeat) for $fpgm_85_31@fpgm.1252, stack height is 28
INFO: :traverse new branch old_state 3 [fpgm.1252] IF
INFO: :alts_count 2 state 3
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85]
INFO: :[pc] fpgm.1271->ENDF|[]
INFO: :     succs are []
INFO: :     call_stack len is 1
INFO: :pop call stack, next is CALL([])
INFO: :stack used 5/stack additional -5
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 85]
INFO: :[pc] glyf.parenright.20->CALL|[]
INFO: :     succs are [MIRP(['11101'])]
INFO: :     call_stack len is 0
INFO: :in glyf.parenright, calling function 85
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2]
INFO: :[pc] fpgm.1249->PUSHB|[2]
INFO: :     succs are [RS([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, 2]
INFO: :[pc] fpgm.1250->RS|[]
INFO: :     succs are [EQ([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, 2, AbstractValue]
INFO: :[pc] fpgm.1251->EQ|[]
INFO: :     succs are [IF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, AbstractValue EQ 2]
INFO: :[pc] fpgm.1252->IF|[]
INFO: :     succs are [MPPEM([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :entering if block (first time) for $fpgm_85_27, stack height is 26
INFO: :traverse new branch old_state 0 [fpgm.1252] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16]
INFO: :[pc] fpgm.1253->MPPEM|[]
INFO: :     succs are [GTEQ([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16, PPEM_Y]
INFO: :[pc] fpgm.1254->GTEQ|[]
INFO: :     succs are [SWAP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, PPEM_Y GTEQ 16]
INFO: :[pc] fpgm.1255->SWAP|[]
INFO: :     succs are [MPPEM([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, PPEM_Y GTEQ 16, 16]
INFO: :[pc] fpgm.1256->MPPEM|[]
INFO: :     succs are [LTEQ([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, PPEM_Y GTEQ 16, 16, PPEM_Y]
INFO: :[pc] fpgm.1257->LTEQ|[]
INFO: :     succs are [AND([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, PPEM_Y GTEQ 16, PPEM_Y LTEQ 16]
INFO: :[pc] fpgm.1258->AND|[]
INFO: :     succs are [IF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, PPEM_Y LTEQ 16 AND PPEM_Y GTEQ 16]
INFO: :[pc] fpgm.1259->IF|[]
INFO: :     succs are [SHPIX([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :entering if block (first time) for $fpgm_85_25, stack height is 24
INFO: :traverse new branch old_state 0 [fpgm.1259] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16]
INFO: :[pc] fpgm.1260->SHPIX|[]
INFO: :     succs are [ELSE([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94]
INFO: :[pc] fpgm.1261->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$prep_744: $fpgm_11_743, $prep_748: $prep_749, $prep_749: $prep_750, arg$3: $prep_751, $prep_1016: $prep_1015, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $prep_1015: $prep_1016, arg$4: $prep_759, $fpgm_24_59: $fpgm_24_58, $prep_744: $fpgm_11_743, $prep_1015: $prep_1016, $prep_743: $fpgm_11_742, $prep_748: $prep_749, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 1, 307, 0, 159, 3, 94], program_stack_length = 22
INFO: :program pointer back (if) to [fpgm.1259] IF, stack height 24
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16]
INFO: :[pc] fpgm.1259->IF|[]
INFO: :     succs are [SHPIX([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 1
INFO: :entering if block (repeat) for $fpgm_85_25@fpgm.1259, stack height is 24
INFO: :traverse new branch old_state 1 [fpgm.1259] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16]
INFO: :[pc] fpgm.1261->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16]
INFO: :[pc] fpgm.1262->POP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14]
INFO: :[pc] fpgm.1263->POP|[]
INFO: :     succs are [EIF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94]
INFO: :[pc] fpgm.1264->EIF|[]
INFO: :     succs are [ELSE([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $prep_748: $prep_749, $fpgm_24_59: $fpgm_24_58, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, arg$3: $prep_751, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $prep_1016: $prep_1015, $prep_748: $prep_749, $prep_749: $prep_750, $prep_744: $fpgm_11_743, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, arg$4: $prep_759, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 1, 307, 0, 159, 3, 94], program_stack_length = 22
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94]
INFO: :[pc] fpgm.1259->IF|[]
INFO: :     succs are [SHPIX([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 2
INFO: :entering if block (getting out) for $fpgm_85_25@fpgm.1259, stack height is 22
INFO: :traverse new branch old_state 2 [fpgm.1259] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94]
INFO: :[pc] fpgm.1264->EIF|[]
INFO: :     succs are [ELSE([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $prep_748: $prep_749, $fpgm_24_59: $fpgm_24_58, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, arg$3: $prep_751, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $prep_1016: $prep_1015, $prep_748: $prep_749, $prep_749: $prep_750, $prep_744: $fpgm_11_743, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, arg$4: $prep_759, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 1, 307, 0, 159, 3, 94], program_stack_length = 22
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94]
INFO: :[pc] fpgm.1259->IF|[]
INFO: :     succs are [SHPIX([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 3
INFO: :entering if block (repeat) for $fpgm_85_25@fpgm.1259, stack height is 22
INFO: :traverse new branch old_state 3 [fpgm.1259] IF
INFO: :alts_count 2 state 3
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94]
INFO: :[pc] fpgm.1265->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {$fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $prep_744: $fpgm_11_743, $prep_748: $prep_749, $fpgm_24_59: $fpgm_24_58, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, arg$3: $prep_751, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2, $prep_1016: $prep_1015, $prep_748: $prep_749, $prep_749: $prep_750, $prep_744: $fpgm_11_743, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, arg$4: $prep_759, $prep_1015: $prep_1016, $fpgm_84_1: $fpgm_84_2}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 1, 307, 0, 159, 3, 94], program_stack_length = 22
INFO: :program pointer back (if) to [fpgm.1252] IF, stack height 26
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16]
INFO: :[pc] fpgm.1252->IF|[]
INFO: :     succs are [MPPEM([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 1
INFO: :entering if block (repeat) for $fpgm_85_25@fpgm.1252, stack height is 26
INFO: :traverse new branch old_state 1 [fpgm.1252] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16]
INFO: :[pc] fpgm.1265->ELSE|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16, 16]
INFO: :[pc] fpgm.1266->POP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16, 16]
INFO: :[pc] fpgm.1267->POP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14, -16]
INFO: :[pc] fpgm.1268->POP|[]
INFO: :     succs are [POP([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94, 14]
INFO: :[pc] fpgm.1269->POP|[]
INFO: :     succs are [EIF([])]
INFO: :     call_stack len is 1
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94]
INFO: :[pc] fpgm.1270->EIF|[]
INFO: :     succs are [ENDF([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {arg$3: $prep_751, $prep_748: $prep_749, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_1015: $prep_1016, $prep_1015: $prep_1016, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_748: $prep_749, $prep_743: $fpgm_11_742, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_24_59: $fpgm_24_58, $prep_749: $prep_750, arg$4: $prep_759, $prep_744: $fpgm_11_743, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $prep_1016: $prep_1015}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 1, 307, 0, 159, 3, 94], program_stack_length = 22
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94]
INFO: :[pc] fpgm.1252->IF|[]
INFO: :     succs are [MPPEM([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 2
INFO: :entering if block (getting out) for $fpgm_85_25@fpgm.1252, stack height is 22
INFO: :traverse new branch old_state 2 [fpgm.1252] IF
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94]
INFO: :[pc] fpgm.1270->EIF|[]
INFO: :     succs are [ENDF([])]
INFO: :     call_stack len is 1
INFO: :env_on_exit is storage = {arg$3: $prep_751, $prep_748: $prep_749, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $prep_1015: $prep_1016, $prep_1015: $prep_1016, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_748: $prep_749, $prep_743: $fpgm_11_742, $prep_744: $fpgm_11_743, $fpgm_84_1: $fpgm_84_2, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $fpgm_84_1: $fpgm_84_2, $fpgm_24_59: $fpgm_24_58, $prep_749: $prep_750, arg$4: $prep_759, $prep_744: $fpgm_11_743, $prep_743: $fpgm_11_742, $fpgm_84_1: $fpgm_84_2, $prep_1016: $prep_1015}, graphics_state = {'rp': [0, 0, 0], 'fv': (0, 1), 'autoFlip': True, 'controlValueCutIn': 255, 'dv': (1, 0), 'pv': (0, 1), 'zp': [1, 1, 1], 'loop': 1}, program_stack = [..., 1, 307, 0, 159, 3, 94], program_stack_length = 22
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94]
INFO: :[pc] fpgm.1252->IF|[]
INFO: :     succs are [MPPEM([]), ELSE([]), EIF([])]
INFO: :     call_stack len is 1
INFO: :succs 3 state 3
INFO: :entering if block (repeat) for $fpgm_85_25@fpgm.1252, stack height is 22
INFO: :traverse new branch old_state 3 [fpgm.1252] IF
INFO: :alts_count 2 state 3
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94]
INFO: :[pc] fpgm.1271->ENDF|[]
INFO: :     succs are []
INFO: :     call_stack len is 1
INFO: :pop call stack, next is MIRP(['11101'])
INFO: :stack used 5/stack additional -5
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159, 3, 94]
INFO: :[pc] glyf.parenright.21->MIRP|['11101']
INFO: :     succs are [MIRP(['10110'])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307, 0, 159]
INFO: :[pc] glyf.parenright.22->MIRP|['10110']
INFO: :     succs are [MIRP(['01101'])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3, 1, 307]
INFO: :[pc] glyf.parenright.23->MIRP|['01101']
INFO: :     succs are [SRP0([])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159, 3]
INFO: :[pc] glyf.parenright.24->SRP0|[]
INFO: :     succs are [MIRP(['10110'])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307, 10, 159]
INFO: :[pc] glyf.parenright.25->MIRP|['10110']
INFO: :     succs are [MIRP(['01101'])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18, 9, 307]
INFO: :[pc] glyf.parenright.26->MIRP|['01101']
INFO: :     succs are [SVTCA(['0'])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18]
INFO: :[pc] glyf.parenright.27->SVTCA|['0']
INFO: :     succs are [MIAP(['1'])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1, 0, 18]
INFO: :[pc] glyf.parenright.28->MIAP|['1']
INFO: :     succs are [ALIGNRP([])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16, 1]
INFO: :[pc] glyf.parenright.29->ALIGNRP|[]
INFO: :     succs are [MIAP(['1'])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9, 10, 16]
INFO: :[pc] glyf.parenright.30->MIAP|['1']
INFO: :     succs are [ALIGNRP([])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2, 9]
INFO: :[pc] glyf.parenright.31->ALIGNRP|[]
INFO: :     succs are [IUP(['1'])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2]
INFO: :[pc] glyf.parenright.32->IUP|['1']
INFO: :     succs are [IUP(['0'])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2]
INFO: :[pc] glyf.parenright.33->IUP|['0']
INFO: :     succs are [SVTCA(['1'])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2]
INFO: :[pc] glyf.parenright.34->SVTCA|['1']
INFO: :     succs are [DELTAP1([])]
INFO: :     call_stack len is 0
INFO: :     program_stack is [40, 2, 40, 16, 2]
INFO: :[pc] glyf.parenright.35->DELTAP1|[]
INFO: :     succs are [ENDF([])]
INFO: :     call_stack len is 0
INFO: :     program_stack is []
INFO: :[pc] glyf.parenright.36->ENDF|[]
INFO: :     succs are []
INFO: :     call_stack len is 0
INFO: :leftovers if_else.env 0

